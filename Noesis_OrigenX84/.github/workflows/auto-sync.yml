name: 🌌 Noesis Auto-Sync Cósmico

on:
  # Ejecutar cada 6 horas
  schedule:
    - cron: '0 */6 * * *'
  
  # Ejecutar cuando hay push a main
  push:
    branches: [ main ]
  
  # Ejecutar cuando hay pull request
  pull_request:
    branches: [ main ]
  
  # Permitir ejecución manual
  workflow_dispatch:
    inputs:
      sync_message:
        description: 'Mensaje personalizado para el commit'
        required: false
        default: '🌌 Sincronización Automática Noésica'

jobs:
  sync-and-optimize:
    name: 🔄 Sincronización y Optimización
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout del repositorio
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install gitpython requests pytz
    
    - name: 🔧 Configurar Git
      run: |
        git config --global user.name "Noesis Bot 🤖"
        git config --global user.email "noesis-bot@github.com"
    
    - name: 🧹 Limpiar y optimizar repositorio
      run: |
        echo "🧹 Limpiando archivos temporales..."
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name ".DS_Store" -delete 2>/dev/null || true
        
        echo "📊 Analizando tamaño del repositorio..."
        du -sh .git
        
        if [ $(du -s .git | cut -f1) -gt 104857600 ]; then
          echo "⚡ Optimizando repositorio (>100MB)..."
          git gc --aggressive --prune=now
          git repack -a -d -f --depth=250 --window=250
        fi
    
    - name: 🔍 Análisis de código y seguridad
      continue-on-error: true
      run: |
        echo "🔍 Analizando archivos Python..."
        find . -name "*.py" -type f | wc -l
        
        echo "🔐 Verificando archivos sensibles..."
        if grep -r "password\|secret\|api_key" --include="*.py" --include="*.js" . 2>/dev/null | grep -v "^Binary"; then
          echo "⚠️ ADVERTENCIA: Posibles credenciales encontradas"
        fi
    
    - name: 📊 Generar métricas del repositorio
      run: |
        cat > .noesis_metrics.json << EOF
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "total_files": $(find . -type f | wc -l),
          "python_files": $(find . -name "*.py" -type f | wc -l),
          "total_commits": $(git rev-list --count HEAD),
          "contributors": $(git shortlog -sn | wc -l),
          "last_sync": "$(date)",
          "workflow_run": "${{ github.run_number }}",
          "triggered_by": "${{ github.event_name }}"
        }
        EOF
    
    - name: 🤖 Generar mensaje de commit inteligente
      id: commit_message
      run: |
        python3 << 'EOF'
        import random
        import datetime
        import os
        
        # Emojis temáticos
        emojis = ["🌌", "🔮", "⚡", "🎯", "🚀", "✨", "🔥", "💎", "🌟", "🛸", "🧬", "🎭", "🌀", "🔯"]
        emoji = random.choice(emojis)
        
        # Contexto del evento
        event = os.environ.get('GITHUB_EVENT_NAME', 'manual')
        custom_msg = "${{ github.event.inputs.sync_message }}"
        
        # Generar mensaje basado en contexto
        if custom_msg and custom_msg != "🌌 Sincronización Automática Noésica":
            message = custom_msg
        elif event == "schedule":
            hour = datetime.datetime.now().hour
            if hour < 6:
                message = f"{emoji} Sincronización Nocturna Cósmica"
            elif hour < 12:
                message = f"{emoji} Despertar Matutino Noésico"
            elif hour < 18:
                message = f"{emoji} Armonización Vespertina"
            else:
                message = f"{emoji} Convergencia Nocturna"
        elif event == "push":
            message = f"{emoji} Evolución Continua del Código"
        elif event == "pull_request":
            message = f"{emoji} Fusión de Realidades Paralelas"
        else:
            message = f"{emoji} Actualización Noésica Automática"
        
        # Agregar timestamp
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        full_message = f"{message} | {timestamp} | Run #{os.environ.get('GITHUB_RUN_NUMBER', '0')}"
        
        print(f"COMMIT_MSG={full_message}")
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"message={full_message}\n")
        EOF
    
    - name: 💾 Commit y Push cambios
      run: |
        # Verificar si hay cambios
        if [[ -n $(git status --porcelain) ]]; then
          echo "📝 Cambios detectados, procediendo con commit..."
          git add .
          git commit -m "${{ steps.commit_message.outputs.message }}"
          git push origin main
          echo "✅ Sincronización completada"
        else
          echo "ℹ️ No hay cambios para sincronizar"
        fi
    
    - name: 📢 Notificación de estado
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Workflow completado exitosamente"
        else
          echo "❌ Workflow falló - Revisar logs"
        fi

  security-scan:
    name: 🔐 Escaneo de Seguridad
    runs-on: ubuntu-latest
    needs: sync-and-optimize
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔍 Ejecutar análisis de seguridad
      uses: github/super-linter@v5
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_PYTHON: true
        VALIDATE_JAVASCRIPT_ES: true
        VALIDATE_JSON: true
        VALIDATE_YAML: true
        VALIDATE_BASH: true
    
    - name: 🛡️ Escaneo de vulnerabilidades
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'

  create-release:
    name: 🏷️ Crear Release Automático
    runs-on: ubuntu-latest
    needs: [sync-and-optimize, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🏷️ Generar versión
      id: version
      run: |
        # Formato: v1.YYYY.MMDD.RUN
        VERSION="v1.$(date +%Y).$(date +%m%d).${{ github.run_number }}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "📌 Nueva versión: $VERSION"
    
    - name: 📦 Crear Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: "🌌 Noesis ${{ steps.version.outputs.VERSION }}"
        body: |
          ## 🌌 Release Automático Noésico
          
          ### 📊 Estadísticas
          - **Versión**: ${{ steps.version.outputs.VERSION }}
          - **Fecha**: $(date)
          - **Commit**: ${{ github.sha }}
          - **Workflow Run**: #${{ github.run_number }}
          
          ### 🔄 Cambios
          - Sincronización automática completada
          - Optimización del repositorio
          - Análisis de seguridad ejecutado
          
          ### 🚀 Mejoras continuas
          El sistema Noesis evoluciona constantemente mediante sincronización automática.
          
          ---
          *Generado automáticamente por el Modo Dios Cósmico* 🛸
        draft: false
        prerelease: false

  cleanup-old-workflows:
    name: 🧹 Limpieza de Workflows Antiguos
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: 🗑️ Eliminar runs antiguos
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 10
